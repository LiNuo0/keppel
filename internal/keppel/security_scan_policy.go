/******************************************************************************
*
*  Copyright 2023 SAP SE
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
******************************************************************************/

package keppel

import (
	"encoding/json"

	"github.com/sapcc/go-bits/errext"
	"github.com/sapcc/go-bits/regexpext"

	"github.com/sapcc/keppel/internal/clair"
)

// SecurityScanPolicy is a policy enabling user-defined adjustments to
// vulnerability reports generated by Trivy.
type SecurityScanPolicy struct {
	//NOTE: We have code that uses slices.Contains() to locate policies. Be careful
	//when adding fields that cannot be meaningfully compared with the == operator.
	ManagingUserName          string                   `json:"managed_by_user"`
	RepositoryRx              regexpext.BoundedRegexp  `json:"match_repository"`
	NegativeRepositoryRx      regexpext.BoundedRegexp  `json:"except_repository,omitempty"`
	VulnerabilityIDRx         regexpext.BoundedRegexp  `json:"match_vulnerability_id"`
	NegativeVulnerabilityIDRx regexpext.BoundedRegexp  `json:"except_vulnerability_id,omitempty"`
	ExceptFixReleased         bool                     `json:"except_fix_released,omitempty"`
	Action                    SecurityScanPolicyAction `json:"action"`
}

// SecurityScanPolicyAction appears in type SecurityScanPolicy.
type SecurityScanPolicyAction struct {
	Assessment string                    `json:"assessment"`
	Ignore     bool                      `json:"ignore,omitempty"`
	Severity   clair.VulnerabilityStatus `json:"severity,omitempty"`
}

// String returns the JSON representation of this policy (for use in log and
// error messages).
func (p SecurityScanPolicy) String() string {
	//we only obtain SecurityScanPolicy instances through unmarshaling, so it is safe to assume that they will marshal without error
	buf, err := json.Marshal(p)
	if err != nil {
		panic(err.Error())
	}
	return string(buf)
}

// Validate returns errors if this policy is invalid.
//
// When constructing error messages, `path` is prepended to all field names.
// This allows identifying the location of the policy within a larger data structure.
func (p SecurityScanPolicy) Validate(path string) (errs errext.ErrorSet) {
	if path == "" {
		path = "policy"
	}

	if p.RepositoryRx == "" {
		errs.Addf(`%s must have the "match_repository" attribute`, path)
	}
	if p.VulnerabilityIDRx == "" {
		errs.Addf(`%s must have the "match_vulnerability_id" attribute`, path)
	}

	if p.Action.Assessment == "" {
		errs.Addf(`%s.action must have the "assessment" attribute`, path)
	}
	if len(p.Action.Assessment) > 1024 {
		errs.Addf(`%s.action.assessment cannot be larger than 1 KiB`, path)
	}

	if p.Action.Ignore {
		if p.Action.Severity != "" {
			errs.Addf(`%s.action cannot have the "severity" attribute when "ignore" is set`, path)
		}
	} else {
		if p.Action.Severity == "" {
			errs.Addf(`%s.action must have the "severity" attribute`, path)
		}
		if !isSeverityKnownByTrivy(p.Action.Severity) {
			errs.Addf(`%s.action.severity contains the invalid value %q`, path, p.Action.Severity)
		}
	}

	return
}

func isSeverityKnownByTrivy(severity clair.VulnerabilityStatus) bool {
	// We don't allow downgrading a severity to "Unknown" through a policy.
	if severity == clair.UnknownSeverity {
		return false
	}
	for _, vulnStatus := range clair.MapToTrivySeverity {
		if severity == vulnStatus {
			return true
		}
	}
	return false
}
